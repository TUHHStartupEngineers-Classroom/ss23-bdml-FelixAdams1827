---
title: "Performance Measures"
author: "Felix Adamaszek"
---

0. Code of Challenge 4

Apply all the steps you have learned in this session on the dataset from challenge of the last session (Product Backorders):

1. Leaderboard visualization

2. Tune a model with grid search

3. Visualize the trade of between the precision and the recall and the optimal threshold

4. ROC Plot

5. Precision vs Recall Plot

6. Gain Plot

7. Lift Plot

8. Dashboard with cowplot

::: callout-note
Between this and the next callout-note is the same code as used in challenge 4 
:::

2 Loading required libraries

```{r}

library(tidyverse)
library(h2o)
library(rsample)
library(recipes)
library(cowplot)
library(glue)

```

3 Loading required data 

```{r}

    product_backorders <- read_csv("/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/H2O Data/product_backorders.csv")

```

4 Splitting the data to training and test

```{r}

set.seed(1234)
split_obj <- initial_split(product_backorders, prop = 0.85)
train_readable_tbl <- training(split_obj)
test_readable_tbl <- testing(split_obj)

product_rec <- recipe(went_on_backorder ~ ., data = train_readable_tbl) %>% 
  step_dummy(all_nominal(), -all_outcomes()) %>% 
  step_zv(all_predictors()) %>% 
  prep()

train_data <- bake(product_rec, new_data = train_readable_tbl)
test_data <- bake(product_rec, new_data = test_readable_tbl)

```

5 Response and predictor variables

```{r}

h2o.init()

split_h2o <- h2o.splitFrame(as.h2o(train_data), ratios = c(0.85), seed = 1234)
train_h2o <- split_h2o[[1]]
valid_h2o <- split_h2o[[2]]
test_h2o  <- as.h2o(test_data)

y <- "went_on_backorder"
x <- setdiff(names(train_h2o),y)

```

6 Running AutoML

```{r}

automl_models_h2o <- h2o.automl(
   x = x,
   y = y,
   training_frame    = train_h2o,
   validation_frame  = valid_h2o,
   leaderboard_frame = test_h2o,
   max_runtime_secs  = 30,
   nfolds            = 5 
 )

```

7 Leaderboard and leadermodel

```{r}

typeof(automl_models_h2o)

slotNames(automl_models_h2o)

automl_models_h2o@leaderboard

automl_models_h2o@leader

h2o.init()

# h2o.getModel("StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844") %>%
# h2o.saveModel(path = "/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test")

```

8 Predicting using leader model

```{r}

stacked_ensemble_h2o <- h2o.loadModel("/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test/StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844")

predictions <- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_data))

typeof(predictions)

predictions_tbl <- predictions %>% as_tibble()

```

9 Optional: Preparation for recreating the model and/or tune some values

```{r}

h2o.init()

deep_learning_h2o <- h2o.loadModel("/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test/StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844")

?h2o.deeplearning

deep_learning_h2o@allparameters

```

::: callout-note
End of challenge 4 code 
:::

Apply all the steps you have learned in this session on the dataset from challenge of the last session (Product Backorders):

1. Leaderboard visualization

2. Tune a model with grid search

3. Visualize the trade of between the precision and the recall and the optimal threshold

4. ROC Plot

5. Precision vs Recall Plot

6. Gain Plot

7. Lift Plot

8. Dashboard with cowplot

Quick Preparation:

```{r}

library(tidyverse)
library(h2o)
library(rsample)
library(recipes)

# The 3 top models

h2o.init()

h2o.getModel("StackedEnsemble_BestOfFamily_1_AutoML_3_20230607_161708") %>%
h2o.saveModel(path = "/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test")

h2o.getModel("StackedEnsemble_BestOfFamily_2_AutoML_3_20230607_161708") %>%
h2o.saveModel(path = "/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test")

h2o.getModel("GBM_1_AutoML_3_20230607_161708") %>%
h2o.saveModel(path = "/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test")

```

# Leaderboard visualization

```{r}

data_transformed_tbl <- automl_models_h2o@leaderboard %>%
        as_tibble() %>%
        select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% 
        mutate(model_type = str_extract(model_id, "[^_]+")) %>%
        slice(1:15) %>% 
        rownames_to_column(var = "rowname") %>%

        mutate(
          model_id   = as_factor(model_id) %>% reorder(auc),
          model_type = as.factor(model_type)
          ) %>% 
          pivot_longer(cols = -c(model_id, model_type, rowname), 
                       names_to = "key", 
                       values_to = "value", 
                       names_transform = list(key = forcats::fct_inorder)
                       ) %>% 
        mutate(model_id = paste0(rowname, ". ", model_id) %>% as_factor() %>% fct_rev())

data_transformed_tbl %>%
        ggplot(aes(value, model_id, color = model_type)) +
        geom_point(size = 3) +
        geom_label(aes(label = round(value, 2), hjust = "inward")) +
        

        facet_wrap(~ key, scales = "free_x") +
        labs(title = "Leaderboard Metrics",
             subtitle = paste0("Ordered by: ", "auc"),
             y = "Model Postion, Model ID", x = "") + 
        theme(legend.position = "bottom")

```

# Tune a model with grid search

```{r}
h2o.init()
model1 <- h2o.loadModel("/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test/StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844")

h2o.performance(model1, newdata = as.h2o(test_data))

deeplearning_grid_01 <- h2o.grid(
  algorithm = "deeplearning",
  grid_id = "deeplearning_grid_01",
  x = x,
  y = y,
  training_frame   = train_h2o,
  validation_frame = valid_h2o,
  nfolds = 5,
  hyper_params = list(
    hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),
    epochs = c(10, 50, 100)
  )
)

deeplearning_grid_01_model_1 <- h2o.getModel("StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844")
deeplearning_grid_01_model_1 %>% h2o.auc(train = T, valid = T, xval = T)
deeplearning_grid_01_model_1 %>%
  h2o.performance(newdata = as.h2o(test_data))

theme_new <- theme(
  legend.position  = "bottom",
  legend.key       = element_blank(),
  panel.background = element_rect(fill   = "transparent"),
  panel.border     = element_rect(color = "black", fill = NA, linewidth = 0.5),
  panel.grid.major = element_line(color = "grey", linewidth = 0.333)
) 

```

# Visualize the trade of between the precision and the recall and the optimal threshold

```{r}

h2o.init()
performance_h2o <- h2o.performance(model1, newdata = as.h2o(test_data))

performance_tbl <- performance_h2o %>%
  h2o.metric() %>%
  as_tibble() 

performance_tbl %>%
  filter(f1 == max(f1))

performance_tbl %>%
  ggplot(aes(x = threshold)) +
  geom_line(aes(y = precision), color = "red", linewidth = 1.1) +
  geom_line(aes(y = recall), color = "blue", linewidth = 1.1) +
  
  # Inserting line where precision and recall are harmonically optimized
  
  geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, "f1")) +
  labs(title = "Precision (red) vs Recall (blue)", y = "value") +
  theme_new

```

# ROC Plot

```{r}


h2o.init()
path <- "/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test/StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844"
load_model_performance_metrics <- function(path, test_data) {
  path
  model_h2o <- h2o.loadModel(path)
  perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_data)) 
  
  perf_h2o %>%
    h2o.metric() %>%
    as_tibble() %>%
    mutate(auc = h2o.auc(perf_h2o)) %>%
    select(tpr, fpr, auc, recall, precision)
  
}


model_metrics_tbl <- fs::dir_info(path = "/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test") %>%
  select(path) %>%
  mutate(metrics = map(path, load_model_performance_metrics, test_data)) %>%
  unnest(cols = metrics)

model_metrics_tbl %>%
    mutate(
      path = str_split(path, pattern = "/", simplify = T)[,2] %>% as_factor(),
      auc  = auc %>% round(3) %>% as.character() %>% as_factor()
    ) %>%
  ggplot(aes(fpr, tpr, colour = path, linetype = auc)) +
  geom_line(size = 0.5) +
  
  geom_abline(color = "green", linetype = "dotted") +
  
  theme_new +
  theme(
    legend.direction = "vertical",
  ) +
  labs(
    title = "ROC Plot",
    subtitle = "Performance of 3 Top Performing Models"
  )

```

# Precision vs Recall Plot

```{r}
h2o.init()

model_metrics_tbl %>%
  mutate(
    path = str_split(path, pattern = "/", simplify = T)[,2] %>% as_factor(),
    auc  = auc %>% round(3) %>% as.character() %>% as_factor()
  ) %>%
  ggplot(aes(recall, precision, color = path, linetype = auc)) +
  geom_line() +
  theme_new + 
  theme(
    legend.direction = "vertical",
  ) +
  labs(
    title = "Precision vs Recall Plot",
    subtitle = "Performance of 3 Top Performing Models"
  )

```

# Gain Plot

```{r}
h2o.init()

gain_lift_tbl <- performance_h2o %>%
  h2o.gainsLift() %>%
  as.tibble()


gain_transformed_tbl <- gain_lift_tbl %>% 
  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%
  select(-contains("lift")) %>%
  mutate(baseline = cumulative_data_fraction) %>%
  rename(gain     = cumulative_capture_rate) %>%
  
  pivot_longer(cols = c(gain, baseline), values_to = "value", names_to = "key")

gain_transformed_tbl %>%
  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +
  geom_line(size = 1.25) +
  labs(
    title = "Gain Chart",
    x = "Cumulative Data Fraction",
    y = "Gain"
  ) +
  theme_new
```

# Lift Plot

```{r}
h2o.init()

lift_transformed_tbl <- gain_lift_tbl %>% 
  select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%
  select(-contains("capture")) %>%
  mutate(baseline = 1) %>%
  rename(lift = cumulative_lift) %>%
  pivot_longer(cols = c(lift, baseline), values_to = "value", names_to = "key")

lift_transformed_tbl %>%
  ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +
  geom_line(size = 1.5) +
  labs(
    title = "Lift Chart",
    x = "Cumulative Data Fraction",
    y = "Lift"
  ) +
  theme_new

```

# Dashboard with cowplot

```{r}
h2o.init()

library(cowplot)
library(glue)

h2o_leaderboard <- automl_models_h2o@leaderboard
newdata <- test_data
order_by <- "auc"
max_models <- 3
size <- 1

plot_h2o_performance <- function(h2o_leaderboard, newdata, order_by = c("auc", "logloss"),
                                 max_models = 3, size = 1) {
    
    # Inputs
    
    leaderboard_tbl <- h2o_leaderboard %>%
        as_tibble() %>%
        slice(1:max_models)
    
    newdata_tbl <- newdata %>%
        as_tibble()

    order_by      <- tolower(order_by[[1]]) 

    order_by_expr <- rlang::sym(order_by)

    h2o.no_progress()
    
    # 1. Model metrics
    
    get_model_performance_metrics <- function(model_id, test_data) {
        
        model_h2o <- h2o.getModel(model_id)
        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_data))
        
        perf_h2o %>%
            h2o.metric() %>%
            as.tibble() %>%
            select(threshold, tpr, fpr, precision, recall)
        
    }
    
    model_metrics_tbl <- leaderboard_tbl %>%
        mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %>%
        unnest(cols = metrics) %>%
        mutate(
          model_id = as_factor(model_id) %>% 
                  
                      fct_reorder(!! order_by_expr, 
                                  .desc = ifelse(order_by == "auc", TRUE, FALSE)),
          auc      = auc %>% 
                      round(3) %>% 
                      as.character() %>% 
                      as_factor() %>% 
                      fct_reorder(as.numeric(model_id)),
          logloss  = logloss %>% 
                      round(4) %>% 
                      as.character() %>% 
                      as_factor() %>% 
                      fct_reorder(as.numeric(model_id))
        )
    
    
    # 1A. ROC Plot
    
    p1 <- model_metrics_tbl %>%
        ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +
        geom_line(size = size) +
        theme_new +
        labs(title = "ROC", x = "FPR", y = "TPR") +
        theme(legend.direction = "vertical") 
        
    
    # 1B. Precision vs Recall
    
    p2 <- model_metrics_tbl %>%
        ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +
        geom_line(size = size) +
        theme_new +
        labs(title = "Precision Vs Recall", x = "Recall", y = "Precision") +
        theme(legend.position = "none") 
    
    
    # 2. Gain / Lift
    
    get_gain_lift <- function(model_id, test_data) {
        
        model_h2o <- h2o.getModel(model_id)
        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_data)) 
        
        perf_h2o %>%
            h2o.gainsLift() %>%
            as.tibble() %>%
            select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)
        
    }
    
    gain_lift_tbl <- leaderboard_tbl %>%
        mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %>%
        unnest(cols = metrics) %>%
        mutate(
            model_id = as_factor(model_id) %>% 
                fct_reorder(!! order_by_expr, 
                            .desc = ifelse(order_by == "auc", TRUE, FALSE)),
            auc  = auc %>% 
                round(3) %>% 
                as.character() %>% 
                as_factor() %>% 
                fct_reorder(as.numeric(model_id)),
            logloss = logloss %>% 
                round(4) %>% 
                as.character() %>% 
                as_factor() %>% 
                fct_reorder(as.numeric(model_id))
        ) %>%
        rename(
            gain = cumulative_capture_rate,
            lift = cumulative_lift
        ) 
    
    # 2A. Gain Plot
    
    p3 <- gain_lift_tbl %>%
        ggplot(aes(cumulative_data_fraction, gain, 
                          color = model_id, linetype = !! order_by_expr)) +
        geom_line(size = size,) +
        geom_segment(x = 0, y = 0, xend = 1, yend = 1, 
                     color = "red", size = size, linetype = "dotted") +
        theme_new +
        expand_limits(x = c(0, 1), y = c(0, 1)) +
        labs(title = "Gain",
             x = "Cumulative Data Fraction", y = "Gain") +
        theme(legend.position = "none")
    
    # 2B. Lift Plot
    
    p4 <- gain_lift_tbl %>%
        ggplot(aes(cumulative_data_fraction, lift, 
                          color = model_id, linetype = !! order_by_expr)) +
        geom_line(size = size) +
        geom_segment(x = 0, y = 1, xend = 1, yend = 1, 
                     color = "red", size = size, linetype = "dotted") +
        theme_new +
        expand_limits(x = c(0, 1), y = c(0, 1)) +
        labs(title = "Lift",
             x = "Cumulative Data Fraction", y = "Lift") +
        theme(legend.position = "none") 
    
    
    # Combine using cowplot
    
    # cowplot::get_legend extracts a legend from a ggplot object
    p_legend <- get_legend(p1)
    # Remove legend from p1
    p1 <- p1 + theme(legend.position = "none")
    
    # cowplot::plt_grid() combines multiple ggplots into a single cowplot object
    p <- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)
    
    # cowplot::ggdraw() sets up a drawing layer
    p_title <- ggdraw() + 
    
        # cowplot::draw_label() draws text on a ggdraw layer / ggplot object
        draw_label("H2O Model Metrics", size = 18, fontface = "bold", 
                   color = "#2C3E50")
    
    p_subtitle <- ggdraw() + 
        draw_label(glue("Ordered by {toupper(order_by)}"), size = 10,  
                   color = "#2C3E50")
    
    # Combine everything
    ret <- plot_grid(p_title, p_subtitle, p, p_legend, 
    
                     # Adjust the relative spacing, so that the legends always fits
                     ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))
    
    h2o.show_progress()
    
    return(ret)
    
}

automl_models_h2o@leaderboard %>%
    plot_h2o_performance(newdata = test_data, order_by = "logloss", 
                         size = 0.5, max_models = 4)
```