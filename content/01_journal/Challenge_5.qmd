---
title: "Performance Measures"
author: "Felix Adamaszek"
---

0. Code of Challenge 4

Apply all the steps you have learned in this session on the dataset from challenge of the last session (Product Backorders):

1. Leaderboard visualization

2. Tune a model with grid search

3. Visualize the trade of between the precision and the recall and the optimal threshold

4. ROC Plot

5. Precision vs Recall Plot

6. Gain Plot

7. Lift Plot

8. Dashboard with cowplot

::: callout-note
Between this and the next callout-note is the same code as used in challenge 4 
:::

2 Loading required libraries

```{r}

library(tidyverse)
library(h2o)
library(rsample)
library(recipes)
library(cowplot)
library(glue)

```

3 Loading required data 

```{r}

    product_backorders <- read_csv("/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/H2O Data/product_backorders.csv")

```

4 Splitting the data to training and test

```{r}

set.seed(1234)
split_obj <- initial_split(product_backorders, prop = 0.85)
train_readable_tbl <- training(split_obj)
test_readable_tbl <- testing(split_obj)

product_rec <- recipe(went_on_backorder ~ ., data = train_readable_tbl) %>% 
  step_dummy(all_nominal(), -all_outcomes()) %>% 
  step_zv(all_predictors()) %>% 
  prep()

train_data <- bake(product_rec, new_data = train_readable_tbl)
test_data <- bake(product_rec, new_data = test_readable_tbl)

```

5 Response and predictor variables

```{r}

h2o.init()

split_h2o <- h2o.splitFrame(as.h2o(train_data), ratios = c(0.85), seed = 1234)
train_h2o <- split_h2o[[1]]
valid_h2o <- split_h2o[[2]]
test_h2o  <- as.h2o(test_data)

y <- "went_on_backorder"
x <- setdiff(names(train_h2o),y)

```

6 Running AutoML

```{r}

automl_models_h2o <- h2o.automl(
   x = x,
   y = y,
   training_frame    = train_h2o,
   validation_frame  = valid_h2o,
   leaderboard_frame = test_h2o,
   max_runtime_secs  = 30,
   nfolds            = 5 
 )

```

7 Leaderboard and leadermodel

```{r}

typeof(automl_models_h2o)

slotNames(automl_models_h2o)

automl_models_h2o@leaderboard

automl_models_h2o@leader

h2o.init()

# h2o.getModel("StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844") %>%
# h2o.saveModel(path = "/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test")

```

8 Predicting using leader model

```{r}

stacked_ensemble_h2o <- h2o.loadModel("/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test/StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844")

predictions <- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_data))

typeof(predictions)

predictions_tbl <- predictions %>% as_tibble()

```

9 Optional: Preparation for recreating the model and/or tune some values

```{r}

h2o.init()

deep_learning_h2o <- h2o.loadModel("/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test/StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844")

?h2o.deeplearning

deep_learning_h2o@allparameters

```

::: callout-note
End of challenge 4 code 
:::

Apply all the steps you have learned in this session on the dataset from challenge of the last session (Product Backorders):

1. Leaderboard visualization

2. Tune a model with grid search

3. Visualize the trade of between the precision and the recall and the optimal threshold

4. ROC Plot

5. Precision vs Recall Plot

6. Gain Plot

7. Lift Plot

8. Dashboard with cowplot

```{r}

library(tidyverse)
library(h2o)
library(rsample)
library(recipes)

```

# Leaderboard visualization

```{r}

data_transformed_tbl <- automl_models_h2o@leaderboard %>%
        as_tibble() %>%
        select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% 
        mutate(model_type = str_extract(model_id, "[^_]+")) %>%
        slice(1:15) %>% 
        rownames_to_column(var = "rowname") %>%

        mutate(
          model_id   = as_factor(model_id) %>% reorder(auc),
          model_type = as.factor(model_type)
          ) %>% 
          pivot_longer(cols = -c(model_id, model_type, rowname), 
                       names_to = "key", 
                       values_to = "value", 
                       names_transform = list(key = forcats::fct_inorder)
                       ) %>% 
        mutate(model_id = paste0(rowname, ". ", model_id) %>% as_factor() %>% fct_rev())

data_transformed_tbl %>%
        ggplot(aes(value, model_id, color = model_type)) +
        geom_point(size = 3) +
        geom_label(aes(label = round(value, 2), hjust = "inward")) +
        

        facet_wrap(~ key, scales = "free_x") +
        labs(title = "Leaderboard Metrics",
             subtitle = paste0("Ordered by: ", "auc"),
             y = "Model Postion, Model ID", x = "") + 
        theme(legend.position = "bottom")

```

# Tune a model with grid search

```{r}
h2o.init()
model1 <- h2o.loadModel("/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test/StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844")

h2o.performance(model1, newdata = as.h2o(test_data))

deeplearning_grid_01 <- h2o.grid(
  algorithm = "deeplearning",
  grid_id = "deeplearning_grid_01",
  x = x,
  y = y,
  training_frame   = train_h2o,
  validation_frame = valid_h2o,
  nfolds = 5,
  hyper_params = list(
    hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),
    epochs = c(10, 50, 100)
  )
)

deeplearning_grid_01_model_1 <- h2o.getModel("StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844")
deeplearning_grid_01_model_1 %>% h2o.auc(train = T, valid = T, xval = T)
deeplearning_grid_01_model_1 %>%
  h2o.performance(newdata = as.h2o(test_data))

theme_new <- theme(
  legend.position  = "bottom",
  legend.key       = element_blank(),
  panel.background = element_rect(fill   = "transparent"),
  panel.border     = element_rect(color = "black", fill = NA, linewidth = 0.5),
  panel.grid.major = element_line(color = "grey", linewidth = 0.333)
) 

theme_new

```

# Visualize the trade of between the precision and the recall and the optimal threshold

```{r}

```

# ROC Plot

```{r}

```

# Precision vs Recall Plot

```{r}

```

# Gain Plot

```{r}

```

# Lift Plot

```{r}

```

# Dashboard with cowplot

```{r}

```