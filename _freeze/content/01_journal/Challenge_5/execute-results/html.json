{
  "hash": "35a438494c59d429361cebde59efafe4",
  "result": {
    "markdown": "---\ntitle: \"Performance Measures\"\nauthor: \"Felix Adamaszek\"\n---\n\n\n0. Code of Challenge 4\n\nApply all the steps you have learned in this session on the dataset from challenge of the last session (Product Backorders):\n\n1. Leaderboard visualization\n\n2. Tune a model with grid search\n\n3. Visualize the trade of between the precision and the recall and the optimal threshold\n\n4. ROC Plot\n\n5. Precision vs Recall Plot\n\n6. Gain Plot\n\n7. Lift Plot\n\n8. Dashboard with cowplot\n\n::: callout-note\nBetween this and the next callout-note is the same code as used in challenge 4 \n:::\n\n2 Loading required libraries\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-1_ff197b7dd2cd81283eadfa400944907d'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(h2o)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(cowplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'cowplot'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following object is masked from 'package:lubridate':\n#> \n#>     stamp\n```\n:::\n\n```{.r .cell-code}\nlibrary(glue)\n```\n:::\n\n\n3 Loading required data \n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-2_ba8012e82208c661f754c58204bcbc8b'}\n\n```{.r .cell-code}\n    product_backorders <- read_csv(\"/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/H2O Data/product_backorders.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 19053 Columns: 23\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#> dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n4 Splitting the data to training and test\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-3_7f824901a487d29f21d120979483d7be'}\n\n```{.r .cell-code}\nset.seed(1234)\nsplit_obj <- initial_split(product_backorders, prop = 0.85)\ntrain_readable_tbl <- training(split_obj)\ntest_readable_tbl <- testing(split_obj)\n\nproduct_rec <- recipe(went_on_backorder ~ ., data = train_readable_tbl) %>% \n  step_dummy(all_nominal(), -all_outcomes()) %>% \n  step_zv(all_predictors()) %>% \n  prep()\n\ntrain_data <- bake(product_rec, new_data = train_readable_tbl)\ntest_data <- bake(product_rec, new_data = test_readable_tbl)\n```\n:::\n\n\n5 Response and predictor variables\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-4_5dd170601a7bf5c49b6dec90efa2e485'}\n\n```{.r .cell-code}\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         1 days 20 hours \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 10 days \n#>     H2O cluster name:           H2O_started_from_R_felixadamaszek_adl455 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   1.62 GB \n#>     H2O cluster total cores:    4 \n#>     H2O cluster allowed cores:  4 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.2.3 (2023-03-15)\n```\n:::\n\n```{.r .cell-code}\nsplit_h2o <- h2o.splitFrame(as.h2o(train_data), ratios = c(0.85), seed = 1234)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o),y)\n```\n:::\n\n\n6 Running AutoML\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-5_cf5561d3529ea28613bb0e030ea84733'}\n\n```{.r .cell-code}\nautoml_models_h2o <- h2o.automl(\n   x = x,\n   y = y,\n   training_frame    = train_h2o,\n   validation_frame  = valid_h2o,\n   leaderboard_frame = test_h2o,\n   max_runtime_secs  = 30,\n   nfolds            = 5 \n )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   3%\n#> 16:17:08.949: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |=====================                                                 |  31%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |========================================================              |  79%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\n\n7 Leaderboard and leadermodel\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-6_62d58391c3ed2ae3b4ccf9a64cd42c42'}\n\n```{.r .cell-code}\ntypeof(automl_models_h2o)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"S4\"\n```\n:::\n\n```{.r .cell-code}\nslotNames(automl_models_h2o)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"     \n#> [5] \"modeling_steps\" \"training_info\"\n```\n:::\n\n```{.r .cell-code}\nautoml_models_h2o@leaderboard\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                                                  model_id       auc   logloss\n#> 1 StackedEnsemble_BestOfFamily_1_AutoML_3_20230607_161708 0.9536553 0.1724271\n#> 2 StackedEnsemble_BestOfFamily_2_AutoML_3_20230607_161708 0.9534280 0.1728308\n#> 3                          GBM_1_AutoML_3_20230607_161708 0.9502559 0.1831675\n#> 4                      XGBoost_1_AutoML_3_20230607_161708 0.9495807 0.1786639\n#> 5                      XGBoost_2_AutoML_3_20230607_161708 0.9384116 0.2176056\n#> 6                          DRF_1_AutoML_3_20230607_161708 0.8987340 0.2811616\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7661186            0.1717562 0.2284561 0.05219220\n#> 2 0.7676726            0.1672881 0.2283156 0.05212802\n#> 3 0.7386430            0.1582557 0.2362444 0.05581141\n#> 4 0.7564656            0.1487976 0.2309446 0.05333541\n#> 5 0.7309856            0.1777058 0.2410858 0.05812235\n#> 6 0.6156206            0.2110244 0.2650532 0.07025321\n#> \n#> [10 rows x 7 columns]\n```\n:::\n\n```{.r .cell-code}\nautoml_models_h2o@leader\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_BestOfFamily_1_AutoML_3_20230607_161708 \n#> Model Summary for Stacked Ensemble: \n#>                                     key            value\n#> 1                     Stacking strategy cross_validation\n#> 2  Number of base models (used / total)              3/3\n#> 3      # GBM base models (used / total)              1/1\n#> 4  # XGBoost base models (used / total)              1/1\n#> 5      # GLM base models (used / total)              1/1\n#> 6                 Metalearner algorithm              GLM\n#> 7    Metalearner fold assignment scheme           Random\n#> 8                    Metalearner nfolds                5\n#> 9               Metalearner fold_column               NA\n#> 10   Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.0331494\n#> RMSE:  0.1820698\n#> LogLoss:  0.1184036\n#> Mean Per-Class Error:  0.1086234\n#> AUC:  0.9805972\n#> AUCPR:  0.8963297\n#> Gini:  0.9611944\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error       Rate\n#> No     8614  175 0.019911  =175/8789\n#> Yes     237  964 0.197336  =237/1201\n#> Totals 8851 1139 0.041241  =412/9990\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.452641    0.823932 168\n#> 2                       max f2  0.257482    0.859400 225\n#> 3                 max f0point5  0.577935    0.851064 133\n#> 4                 max accuracy  0.452641    0.958759 168\n#> 5                max precision  0.985164    1.000000   0\n#> 6                   max recall  0.010651    1.000000 371\n#> 7              max specificity  0.985164    1.000000   0\n#> 8             max absolute_mcc  0.452641    0.800955 168\n#> 9   max min_per_class_accuracy  0.187761    0.929685 250\n#> 10 max mean_per_class_accuracy  0.194759    0.930518 247\n#> 11                     max tns  0.985164 8789.000000   0\n#> 12                     max fns  0.985164 1199.000000   0\n#> 13                     max fps  0.000607 8789.000000 399\n#> 14                     max tps  0.010651 1201.000000 371\n#> 15                     max tnr  0.985164    1.000000   0\n#> 16                     max fnr  0.985164    0.998335   0\n#> 17                     max fpr  0.000607    1.000000 399\n#> 18                     max tpr  0.010651    1.000000 371\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.04443069\n#> RMSE:  0.2107859\n#> LogLoss:  0.1501155\n#> Mean Per-Class Error:  0.1359757\n#> AUC:  0.9590868\n#> AUCPR:  0.7864287\n#> Gini:  0.9181736\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2035  94 0.044152   =94/2129\n#> Yes      59 200 0.227799    =59/259\n#> Totals 2094 294 0.064070  =153/2388\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.369012    0.723327 175\n#> 2                       max f2  0.195185    0.792768 229\n#> 3                 max f0point5  0.664474    0.745659 104\n#> 4                 max accuracy  0.524776    0.939280 139\n#> 5                max precision  0.971322    1.000000   0\n#> 6                   max recall  0.006250    1.000000 379\n#> 7              max specificity  0.971322    1.000000   0\n#> 8             max absolute_mcc  0.369012    0.689027 175\n#> 9   max min_per_class_accuracy  0.143159    0.892907 252\n#> 10 max mean_per_class_accuracy  0.117526    0.900850 265\n#> 11                     max tns  0.971322 2129.000000   0\n#> 12                     max fns  0.971322  257.000000   0\n#> 13                     max fps  0.000494 2129.000000 399\n#> 14                     max tps  0.006250  259.000000 379\n#> 15                     max tnr  0.971322    1.000000   0\n#> 16                     max fnr  0.971322    0.992278   0\n#> 17                     max fpr  0.000494    1.000000 399\n#> 18                     max tpr  0.006250    1.000000 379\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.05058479\n#> RMSE:  0.2249106\n#> LogLoss:  0.1714974\n#> Mean Per-Class Error:  0.1505787\n#> AUC:  0.9497005\n#> AUCPR:  0.7475923\n#> Gini:  0.899401\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>           No  Yes    Error         Rate\n#> No     11557  596 0.049041   =596/12153\n#> Yes      417 1237 0.252116    =417/1654\n#> Totals 11974 1833 0.073369  =1013/13807\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold        value idx\n#> 1                       max f1  0.329871     0.709492 209\n#> 2                       max f2  0.170900     0.777437 268\n#> 3                 max f0point5  0.599109     0.737433 126\n#> 4                 max accuracy  0.539519     0.931774 144\n#> 5                max precision  0.988358     1.000000   0\n#> 6                   max recall  0.002198     1.000000 395\n#> 7              max specificity  0.988358     1.000000   0\n#> 8             max absolute_mcc  0.329871     0.668787 209\n#> 9   max min_per_class_accuracy  0.124049     0.883313 290\n#> 10 max mean_per_class_accuracy  0.100891     0.885585 302\n#> 11                     max tns  0.988358 12153.000000   0\n#> 12                     max fns  0.988358  1653.000000   0\n#> 13                     max fps  0.000647 12153.000000 399\n#> 14                     max tps  0.002198  1654.000000 395\n#> 15                     max tnr  0.988358     1.000000   0\n#> 16                     max fnr  0.988358     0.999395   0\n#> 17                     max fpr  0.000647     1.000000 399\n#> 18                     max tpr  0.002198     1.000000 395\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy    0.929452  0.006466   0.939790   0.924468   0.928366   0.930872\n#> auc         0.950070  0.002367   0.952007   0.951888   0.948251   0.951357\n#> err         0.070548  0.006466   0.060210   0.075532   0.071634   0.069128\n#> err_count 194.800000 18.005554 166.000000 213.000000 199.000000 191.000000\n#> f0point5    0.703828  0.027116   0.750514   0.695489   0.682081   0.689158\n#>           cv_5_valid\n#> accuracy    0.923763\n#> auc         0.946846\n#> err         0.076237\n#> err_count 205.000000\n#> f0point5    0.701897\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.697946  0.040590   0.768421   0.687003   0.668555\n#> r2                  0.520437  0.019085   0.551716   0.519597   0.502099\n#> recall              0.732713  0.027932   0.686520   0.731638   0.742138\n#> residual_deviance 945.659500 46.546272 881.382200 998.188000 947.736700\n#> rmse                0.224748  0.007168   0.214167   0.229642   0.224657\n#> specificity         0.956201  0.009377   0.972929   0.952149   0.952439\n#>                   cv_4_valid cv_5_valid\n#> precision           0.673239   0.692513\n#> r2                  0.508538   0.520234\n#> recall              0.761146   0.742120\n#> residual_deviance 921.132750 979.857900\n#> rmse                0.222497   0.232779\n#> specificity         0.952634   0.950855\n```\n:::\n\n```{.r .cell-code}\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         1 days 20 hours \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 10 days \n#>     H2O cluster name:           H2O_started_from_R_felixadamaszek_adl455 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   1.60 GB \n#>     H2O cluster total cores:    4 \n#>     H2O cluster allowed cores:  4 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.2.3 (2023-03-15)\n```\n:::\n\n```{.r .cell-code}\n# h2o.getModel(\"StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844\") %>%\n# h2o.saveModel(path = \"/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test\")\n```\n:::\n\n\n8 Predicting using leader model\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-7_20985f7a0a738a038c25840123f10323'}\n\n```{.r .cell-code}\nstacked_ensemble_h2o <- h2o.loadModel(\"/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test/StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844\")\n\npredictions <- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ntypeof(predictions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"environment\"\n```\n:::\n\n```{.r .cell-code}\npredictions_tbl <- predictions %>% as_tibble()\n```\n:::\n\n\n9 Optional: Preparation for recreating the model and/or tune some values\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-8_69fbbeb6cdf9cf77035d8bdfc27149cf'}\n\n```{.r .cell-code}\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         1 days 20 hours \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 10 days \n#>     H2O cluster name:           H2O_started_from_R_felixadamaszek_adl455 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   1.60 GB \n#>     H2O cluster total cores:    4 \n#>     H2O cluster allowed cores:  4 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.2.3 (2023-03-15)\n```\n:::\n\n```{.r .cell-code}\ndeep_learning_h2o <- h2o.loadModel(\"/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test/StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844\")\n\n?h2o.deeplearning\n\ndeep_learning_h2o@allparameters\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> $model_id\n#> [1] \"StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844\"\n#> \n#> $training_frame\n#> [1] \"AutoML_2_20230606_141844_training_RTMP_sid_b202_5\"\n#> \n#> $base_models\n#> $base_models[[1]]\n#> $base_models[[1]]$`__meta`\n#> $base_models[[1]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[1]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[1]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[1]]$name\n#> [1] \"XGBoost_1_AutoML_2_20230606_141844\"\n#> \n#> $base_models[[1]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[1]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[2]]\n#> $base_models[[2]]$`__meta`\n#> $base_models[[2]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[2]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[2]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[2]]$name\n#> [1] \"GBM_1_AutoML_2_20230606_141844\"\n#> \n#> $base_models[[2]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[2]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[3]]\n#> $base_models[[3]]$`__meta`\n#> $base_models[[3]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[3]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[3]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[3]]$name\n#> [1] \"DRF_1_AutoML_2_20230606_141844\"\n#> \n#> $base_models[[3]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[3]]$URL\n#> NULL\n#> \n#> \n#> $base_models[[4]]\n#> $base_models[[4]]$`__meta`\n#> $base_models[[4]]$`__meta`$schema_version\n#> [1] 3\n#> \n#> $base_models[[4]]$`__meta`$schema_name\n#> [1] \"KeyV3\"\n#> \n#> $base_models[[4]]$`__meta`$schema_type\n#> [1] \"Key<Keyed>\"\n#> \n#> \n#> $base_models[[4]]$name\n#> [1] \"GLM_1_AutoML_2_20230606_141844\"\n#> \n#> $base_models[[4]]$type\n#> [1] \"Key<Keyed>\"\n#> \n#> $base_models[[4]]$URL\n#> NULL\n#> \n#> \n#> \n#> $metalearner_algorithm\n#> [1] \"glm\"\n#> \n#> $metalearner_nfolds\n#> [1] 5\n#> \n#> $metalearner_params\n#> [1] \"\"\n#> \n#> $metalearner_transform\n#> [1] \"Logit\"\n#> \n#> $max_runtime_secs\n#> [1] 0.4566667\n#> \n#> $seed\n#> [1] \"5766883882285979032\"\n#> \n#> $score_training_samples\n#> [1] 10000\n#> \n#> $keep_levelone_frame\n#> [1] TRUE\n#> \n#> $auc_type\n#> [1] \"AUTO\"\n#> \n#> $x\n#>  [1] \"sku\"                 \"national_inv\"        \"lead_time\"          \n#>  [4] \"in_transit_qty\"      \"forecast_3_month\"    \"forecast_6_month\"   \n#>  [7] \"forecast_9_month\"    \"sales_1_month\"       \"sales_3_month\"      \n#> [10] \"sales_6_month\"       \"sales_9_month\"       \"min_bank\"           \n#> [13] \"pieces_past_due\"     \"perf_6_month_avg\"    \"perf_12_month_avg\"  \n#> [16] \"local_bo_qty\"        \"potential_issue_Yes\" \"deck_risk_Yes\"      \n#> [19] \"oe_constraint_Yes\"   \"ppap_risk_Yes\"       \"stop_auto_buy_Yes\"  \n#> [22] \"rev_stop_Yes\"       \n#> \n#> $y\n#> [1] \"went_on_backorder\"\n```\n:::\n:::\n\n\n::: callout-note\nEnd of challenge 4 code \n:::\n\nApply all the steps you have learned in this session on the dataset from challenge of the last session (Product Backorders):\n\n1. Leaderboard visualization\n\n2. Tune a model with grid search\n\n3. Visualize the trade of between the precision and the recall and the optimal threshold\n\n4. ROC Plot\n\n5. Precision vs Recall Plot\n\n6. Gain Plot\n\n7. Lift Plot\n\n8. Dashboard with cowplot\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-9_c412e2a69d09cab6a438b26355714a69'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(h2o)\nlibrary(rsample)\nlibrary(recipes)\n```\n:::\n\n\n# Leaderboard visualization\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-10_6ee7bac2c1dd7622687ab7406e09439b'}\n\n```{.r .cell-code}\ndata_transformed_tbl <- automl_models_h2o@leaderboard %>%\n        as_tibble() %>%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n        slice(1:15) %>% \n        rownames_to_column(var = \"rowname\") %>%\n\n        mutate(\n          model_id   = as_factor(model_id) %>% reorder(auc),\n          model_type = as.factor(model_type)\n          ) %>% \n          pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       ) %>% \n        mutate(model_id = paste0(rowname, \". \", model_id) %>% as_factor() %>% fct_rev())\n\ndata_transformed_tbl %>%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = 3) +\n        geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n        \n\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", \"auc\"),\n             y = \"Model Postion, Model ID\", x = \"\") + \n        theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](Challenge_5_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n# Tune a model with grid search\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-11_2f31714da82f4b1c192e04a3b43afc80'}\n\n```{.r .cell-code}\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         1 days 20 hours \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 10 days \n#>     H2O cluster name:           H2O_started_from_R_felixadamaszek_adl455 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   1.60 GB \n#>     H2O cluster total cores:    4 \n#>     H2O cluster allowed cores:  4 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.2.3 (2023-03-15)\n```\n:::\n\n```{.r .cell-code}\nmodel1 <- h2o.loadModel(\"/Users/felixadamaszek/Documents/GitHub/ss23-bdml-FelixAdams1827/ss23-bdml-FelixAdams1827/content/01_journal/test/StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844\")\n\nh2o.performance(model1, newdata = as.h2o(test_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n#> H2OBinomialMetrics: stackedensemble\n#> \n#> MSE:  0.05236458\n#> RMSE:  0.2288331\n#> LogLoss:  0.1733521\n#> Mean Per-Class Error:  0.1497764\n#> AUC:  0.9527393\n#> AUCPR:  0.7553282\n#> Gini:  0.9054786\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2372 133 0.053094  =133/2505\n#> Yes      87 266 0.246459    =87/353\n#> Totals 2459 399 0.076977  =220/2858\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.318209    0.707447 193\n#> 2                       max f2  0.140659    0.789474 264\n#> 3                 max f0point5  0.491648    0.731148 138\n#> 4                 max accuracy  0.491648    0.930021 138\n#> 5                max precision  0.978623    1.000000   0\n#> 6                   max recall  0.008918    1.000000 377\n#> 7              max specificity  0.978623    1.000000   0\n#> 8             max absolute_mcc  0.318209    0.664968 193\n#> 9   max min_per_class_accuracy  0.140659    0.892351 264\n#> 10 max mean_per_class_accuracy  0.129535    0.893758 271\n#> 11                     max tns  0.978623 2505.000000   0\n#> 12                     max fns  0.978623  352.000000   0\n#> 13                     max fps  0.000749 2505.000000 399\n#> 14                     max tps  0.008918  353.000000 377\n#> 15                     max tnr  0.978623    1.000000   0\n#> 16                     max fnr  0.978623    0.997167   0\n#> 17                     max fpr  0.000749    1.000000 399\n#> 18                     max tpr  0.008918    1.000000 377\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n```\n:::\n\n```{.r .cell-code}\ndeeplearning_grid_01 <- h2o.grid(\n  algorithm = \"deeplearning\",\n  grid_id = \"deeplearning_grid_01\",\n  x = x,\n  y = y,\n  training_frame   = train_h2o,\n  validation_frame = valid_h2o,\n  nfolds = 5,\n  hyper_params = list(\n    hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n    epochs = c(10, 50, 100)\n  )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in h2o.getGrid(grid_id = grid_id): Some models were not built due to a\n#> failure, for more details run `summary(grid_object, show_stack_traces = TRUE)`\n```\n:::\n\n```{.r .cell-code}\ndeeplearning_grid_01_model_1 <- h2o.getModel(\"StackedEnsemble_BestOfFamily_2_AutoML_2_20230606_141844\")\ndeeplearning_grid_01_model_1 %>% h2o.auc(train = T, valid = T, xval = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>     train     valid      xval \n#> 0.9798214 0.9589127 0.9490955\n```\n:::\n\n```{.r .cell-code}\ndeeplearning_grid_01_model_1 %>%\n  h2o.performance(newdata = as.h2o(test_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n#> H2OBinomialMetrics: stackedensemble\n#> \n#> MSE:  0.05236458\n#> RMSE:  0.2288331\n#> LogLoss:  0.1733521\n#> Mean Per-Class Error:  0.1497764\n#> AUC:  0.9527393\n#> AUCPR:  0.7553282\n#> Gini:  0.9054786\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     2372 133 0.053094  =133/2505\n#> Yes      87 266 0.246459    =87/353\n#> Totals 2459 399 0.076977  =220/2858\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.318209    0.707447 193\n#> 2                       max f2  0.140659    0.789474 264\n#> 3                 max f0point5  0.491648    0.731148 138\n#> 4                 max accuracy  0.491648    0.930021 138\n#> 5                max precision  0.978623    1.000000   0\n#> 6                   max recall  0.008918    1.000000 377\n#> 7              max specificity  0.978623    1.000000   0\n#> 8             max absolute_mcc  0.318209    0.664968 193\n#> 9   max min_per_class_accuracy  0.140659    0.892351 264\n#> 10 max mean_per_class_accuracy  0.129535    0.893758 271\n#> 11                     max tns  0.978623 2505.000000   0\n#> 12                     max fns  0.978623  352.000000   0\n#> 13                     max fps  0.000749 2505.000000 399\n#> 14                     max tps  0.008918  353.000000 377\n#> 15                     max tnr  0.978623    1.000000   0\n#> 16                     max fnr  0.978623    0.997167   0\n#> 17                     max fpr  0.000749    1.000000 399\n#> 18                     max tpr  0.008918    1.000000 377\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n```\n:::\n\n```{.r .cell-code}\ntheme_new <- theme(\n  legend.position  = \"bottom\",\n  legend.key       = element_blank(),\n  panel.background = element_rect(fill   = \"transparent\"),\n  panel.border     = element_rect(color = \"black\", fill = NA, linewidth = 0.5),\n  panel.grid.major = element_line(color = \"grey\", linewidth = 0.333)\n) \n\ntheme_new\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> List of 5\n#>  $ legend.key      : list()\n#>   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n#>  $ legend.position : chr \"bottom\"\n#>  $ panel.background:List of 5\n#>   ..$ fill         : chr \"transparent\"\n#>   ..$ colour       : NULL\n#>   ..$ linewidth    : NULL\n#>   ..$ linetype     : NULL\n#>   ..$ inherit.blank: logi FALSE\n#>   ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n#>  $ panel.border    :List of 5\n#>   ..$ fill         : logi NA\n#>   ..$ colour       : chr \"black\"\n#>   ..$ linewidth    : num 0.5\n#>   ..$ linetype     : NULL\n#>   ..$ inherit.blank: logi FALSE\n#>   ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n#>  $ panel.grid.major:List of 6\n#>   ..$ colour       : chr \"grey\"\n#>   ..$ linewidth    : num 0.333\n#>   ..$ linetype     : NULL\n#>   ..$ lineend      : NULL\n#>   ..$ arrow        : logi FALSE\n#>   ..$ inherit.blank: logi FALSE\n#>   ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n#>  - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n#>  - attr(*, \"complete\")= logi FALSE\n#>  - attr(*, \"validate\")= logi TRUE\n```\n:::\n:::\n\n\n# Visualize the trade of between the precision and the recall and the optimal threshold\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-12_a9e6da7b2f6658b5b4160f138abd8c57'}\n\n:::\n\n\n# ROC Plot\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-13_cf23947c8877d9dc642b534b12b32a9e'}\n\n:::\n\n\n# Precision vs Recall Plot\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-14_3c87b0b10f2e98c5e52b9099ec60c4c2'}\n\n:::\n\n\n# Gain Plot\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-15_cfddeec92734a61b663bb24439969587'}\n\n:::\n\n\n# Lift Plot\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-16_3193004f3c55f9afd14512d532d40dd7'}\n\n:::\n\n\n# Dashboard with cowplot\n\n\n::: {.cell hash='Challenge_5_cache/html/unnamed-chunk-17_c4a9c8501228bd630c3808abeb2abbdb'}\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}